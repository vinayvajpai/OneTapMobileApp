<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://xamarin.com/schemas/2014/forms"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             x:Class="OneTapMobile.Views.ChangePasswordView"
             xmlns:Popups="clr-namespace:OneTapMobile.Popups"
             xmlns:ios="clr-namespace:Xamarin.Forms.PlatformConfiguration.iOSSpecific;assembly=Xamarin.Forms.Core" 
             xmlns:converter="clr-namespace:OneTapMobile.Converters"
             xmlns:customcontrol="clr-namespace:OneTapMobile.CustomControl" xmlns:viewmodels="clr-namespace:OneTapMobile.ViewModels" x:DataType="viewmodels:ChangePasswordViewModel"
             ios:Page.UseSafeArea="false"
             NavigationPage.HasNavigationBar="False">
    <!--page background-->
        <ContentPage.Background>
            <!--<LinearGradientBrush StartPoint="0,0"
                             EndPoint="0,1">
                <GradientStop Color="#FFF5DD"
                          Offset="0.0"/>
                <GradientStop Color="#FFE3A5"
                          Offset="1.0"/>
            </LinearGradientBrush>-->
        <LinearGradientBrush>
            <GradientStop Color="#FFFFFF"/>
            <GradientStop Color="#FFFFFF"/>
        </LinearGradientBrush>
    </ContentPage.Background>
        <!--converters Used-->
        <ContentPage.Resources>
            <converter:MultiTriggerConverter x:Key="dataHasBeenEntered" />
            <converter:EmailToBoolConverter x:Key="EmailTextChecked" />
            <converter:LengthConverter x:Key="TextLengthCounter"/>
        </ContentPage.Resources>
        <!--Page Views-->
        <ContentPage.Content>
            <Grid Margin="0,0,0,0">
                <StackLayout Margin="{Binding SafeAreaSpacing}" VerticalOptions="FillAndExpand" Spacing="20">
                    <!--Navigation bar-->
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="1*"></ColumnDefinition>
                            <ColumnDefinition Width="8*"></ColumnDefinition>
                            <ColumnDefinition Width="1*"></ColumnDefinition>
                        </Grid.ColumnDefinitions>
                        <ImageButton Grid.Column="0" Grid.Row="0" Source="BackArrow" BackgroundColor="Transparent" VerticalOptions="CenterAndExpand" HorizontalOptions="CenterAndExpand" HeightRequest="30" WidthRequest="30" Command="{Binding BackBtn}"/>
                        <Label Grid.Column="1" Grid.Row="0"  Text="Change Password" HorizontalOptions="CenterAndExpand" VerticalOptions="FillAndExpand" VerticalTextAlignment="Center" HorizontalTextAlignment="Center" TextColor="Black" FontSize="Medium" FontAttributes="Bold"/>
                    </Grid>
                    <!--remaining page views-->
                    <StackLayout Margin="15,20" VerticalOptions="StartAndExpand" Spacing="20">
                        <!--Old Password Entry field-->
                    <Frame Style="{StaticResource FrameStyle}">
                        <StackLayout Orientation="Horizontal" BackgroundColor="Transparent" HorizontalOptions="FillAndExpand" VerticalOptions="FillAndExpand">
                            <customcontrol:CustomEntry x:Name="OldPasswordTxt" Margin="5,-15" Placeholder="Old Password" TextColor="Black" PlaceholderColor="Gray" HorizontalOptions="FillAndExpand" VerticalOptions="CenterAndExpand" IsPassword="{Binding IsOldPassword,Mode=TwoWay}" Keyboard="Default" FontFamily="{StaticResource NormalFont}" Text="{Binding OldPassword}"/>
                            <ImageButton Source="ViewPassword.png" HeightRequest="20" WidthRequest="20" HorizontalOptions="EndAndExpand" VerticalOptions="CenterAndExpand" IsVisible="{Binding ViewOldPassWord, Mode=TwoWay}" Command="{Binding ViewOldPassWordCmd}" BackgroundColor="Transparent"/>
                            <ImageButton Source="hidepassword.png" HeightRequest="20" WidthRequest="20" HorizontalOptions="EndAndExpand" VerticalOptions="CenterAndExpand" IsVisible="{Binding HideOldPassWord, Mode=TwoWay}" Command="{Binding HideOldPassWordCmd}" BackgroundColor="Transparent"/>
                        </StackLayout>
                        <Frame.Triggers>
                            <DataTrigger TargetType="Frame"  Binding="{Binding Source={x:Reference OldPasswordTxt}, Path=IsFocused}" Value="false " >
                                <Setter Property="BorderColor" Value="#AC47ED"/>
                            </DataTrigger>
                            <DataTrigger TargetType="Frame"  Binding="{Binding Source={x:Reference OldPasswordTxt}, Path=IsFocused}" Value="True" >
                                <Setter Property="BorderColor" Value="#AC47ED"/>
                            </DataTrigger>
                            <DataTrigger TargetType="Frame"  Binding="{Binding Source={x:Reference OldPasswordTxt}, Path=Text.Length,Converter={StaticResource TextLengthCounter}}" Value="true" >
                                <Setter Property="BorderColor" Value="#F55937"/>
                            </DataTrigger>
                        </Frame.Triggers>
                    </Frame>
                        <!--New Password Entry Field-->
                        <Frame Style="{StaticResource FrameStyle}">
                            <StackLayout Orientation="Horizontal" BackgroundColor="Transparent" HorizontalOptions="FillAndExpand" VerticalOptions="FillAndExpand">
                                <customcontrol:CustomEntry x:Name="NewPasswordTxt" Margin="5,-15" Placeholder="New Password" TextColor="Black" PlaceholderColor="Gray" HorizontalOptions="FillAndExpand" VerticalOptions="CenterAndExpand" IsPassword="{Binding IsNewPassword,Mode=TwoWay}" Keyboard="Default" FontFamily="{StaticResource NormalFont}" Text="{Binding NewPassword}"/>
                                <ImageButton Source="ViewPassword.png" HeightRequest="20" WidthRequest="20" HorizontalOptions="EndAndExpand" VerticalOptions="CenterAndExpand" IsVisible="{Binding ViewNewPassWord, Mode=TwoWay}" Command="{Binding ViewNewPassWordCmd}" BackgroundColor="Transparent"/>
                                <ImageButton Source="hidepassword.png" HeightRequest="20" WidthRequest="20" HorizontalOptions="EndAndExpand" VerticalOptions="CenterAndExpand" IsVisible="{Binding HideNewPassWord, Mode=TwoWay}" Command="{Binding HideNewPassWordCmd}" BackgroundColor="Transparent"/>
                            </StackLayout>
                            <Frame.Triggers>
                            <DataTrigger TargetType="Frame"  Binding="{Binding Source={x:Reference NewPasswordTxt}, Path=IsFocused}" Value="false " >
                                <Setter Property="BorderColor" Value="#AC47ED"/>
                                </DataTrigger>
                            <DataTrigger TargetType="Frame"  Binding="{Binding Source={x:Reference NewPasswordTxt}, Path=IsFocused}" Value="True" >
                                    <Setter Property="BorderColor" Value="#AC47ED"/>
                                </DataTrigger>
                            <DataTrigger TargetType="Frame"  Binding="{Binding Source={x:Reference NewPasswordTxt}, Path=Text.Length,Converter={StaticResource TextLengthCounter}}" Value="true" >
                                    <Setter Property="BorderColor" Value="#F55937"/>
                                </DataTrigger>
                            </Frame.Triggers>
                        </Frame>
                        <!--Caution for password Length-->
                        <StackLayout Orientation="Horizontal" BackgroundColor="Transparent" HorizontalOptions="StartAndExpand" VerticalOptions="StartAndExpand">
                            <Image Source="info.png" HeightRequest="15" WidthRequest="15" HorizontalOptions="CenterAndExpand" VerticalOptions="CenterAndExpand"/>
                            <Label Text="password must be at least 8 charecters long" IsVisible="True" TextColor="Black" FontSize="12" HorizontalOptions="CenterAndExpand" VerticalOptions="CenterAndExpand"/>
                        </StackLayout>
                        <!--Confirm New Password Field-->
                        <Frame Style="{StaticResource FrameStyle}">
                            <StackLayout Orientation="Horizontal" BackgroundColor="Transparent" HorizontalOptions="FillAndExpand" VerticalOptions="FillAndExpand">
                                <customcontrol:CustomEntry x:Name="CfrmNewPasswordTxt" Margin="5,-15" Placeholder="Confirm New Password" TextColor="Black" PlaceholderColor="Gray" HorizontalOptions="FillAndExpand" VerticalOptions="CenterAndExpand" IsPassword="{Binding IsConfirmNewPassword,Mode=TwoWay}" Keyboard="Default" FontFamily="{StaticResource NormalFont}"  Text="{Binding ConfirmNewPassword}"/>
                                <ImageButton Source="ViewPassword.png" HeightRequest="20" WidthRequest="20" HorizontalOptions="EndAndExpand" VerticalOptions="CenterAndExpand" IsVisible="{Binding ViewConNewPassWord, Mode=TwoWay}" Command="{Binding ViewCofirmPassCmd}" BackgroundColor="Transparent"/>
                                <ImageButton Source="hidepassword.png" HeightRequest="20" WidthRequest="20" HorizontalOptions="EndAndExpand" VerticalOptions="CenterAndExpand" IsVisible="{Binding HideConNewPassWord, Mode=TwoWay}" Command="{Binding HideCofirmPassCmd}" BackgroundColor="Transparent"/>
                            </StackLayout>
                            <Frame.Triggers>
                            <DataTrigger TargetType="Frame"  Binding="{Binding Source={x:Reference CfrmNewPasswordTxt}, Path=IsFocused}" Value="false " >
                                <Setter Property="BorderColor" Value="#AC47ED"/>
                                </DataTrigger>
                            <DataTrigger TargetType="Frame"  Binding="{Binding Source={x:Reference CfrmNewPasswordTxt}, Path=IsFocused}" Value="True" >
                                    <Setter Property="BorderColor" Value="#AC47ED"/>
                                </DataTrigger>
                            <DataTrigger TargetType="Frame"  Binding="{Binding Source={x:Reference CfrmNewPasswordTxt}, Path=Text.Length,Converter={StaticResource TextLengthCounter}}" Value="true" >
                                    <Setter Property="BorderColor" Value="#F55937"/>
                                </DataTrigger>
                            </Frame.Triggers>
                        </Frame>
                        <!--Sign Up Button-->
                        <Frame Style="{StaticResource FrameStyle}"  BackgroundColor="#BE7CE9" IsEnabled="False" >
                            <Label Text="Change Password"  Style="{StaticResource LabelStyle}" HorizontalOptions="CenterAndExpand" VerticalOptions="CenterAndExpand" Opacity="0.5" TextColor="White" FontSize="16" FontFamily="{StaticResource SemiBoldFont}">
                                <Label.Triggers>
                                    <MultiTrigger TargetType="Label">
                                        <MultiTrigger.Conditions>
                                        <BindingCondition Binding="{Binding Source={x:Reference OldPasswordTxt}, Path=Text.Length,Converter={StaticResource dataHasBeenEntered}}" Value="true" />
                                        <BindingCondition Binding="{Binding Source={x:Reference NewPasswordTxt}, Path=Text.Length,Converter={StaticResource dataHasBeenEntered}}" Value="true" />
                                        <BindingCondition Binding="{Binding Source={x:Reference CfrmNewPasswordTxt}, Path=Text.Length,Converter={StaticResource dataHasBeenEntered}}" Value="true" />
                                        </MultiTrigger.Conditions>
                                        <Setter Property="Opacity" Value="1.0"/>
                                    </MultiTrigger>
                                </Label.Triggers>
                            </Label>
                            <Frame.GestureRecognizers>
                                <TapGestureRecognizer Command="{Binding ChangePasswordCmd}"/>
                            </Frame.GestureRecognizers>
                            <Frame.Triggers>
                                <MultiTrigger TargetType="Frame">
                                    <MultiTrigger.Conditions>
                                    <BindingCondition Binding="{Binding Source={x:Reference OldPasswordTxt}, Path=Text.Length,Converter={StaticResource dataHasBeenEntered}}" Value="true" />
                                    <BindingCondition Binding="{Binding Source={x:Reference NewPasswordTxt}, Path=Text.Length,Converter={StaticResource dataHasBeenEntered}}" Value="true" />
                                    <BindingCondition Binding="{Binding Source={x:Reference CfrmNewPasswordTxt}, Path=Text.Length,Converter={StaticResource dataHasBeenEntered}}" Value="true" />
                                    </MultiTrigger.Conditions>
                                    <Setter Property="IsEnabled" Value="true" />
                                    <Setter Property="BackgroundColor" Value="#AC47ED" />
                                </MultiTrigger>
                            </Frame.Triggers>
                        </Frame>
                        <!--Terms and Condition-->
                    </StackLayout>
                </StackLayout>
                <!--Loader Views-->
                <Popups:LoaderView IsVisible="{Binding IsBusy}" LoadderText="Requesting for change password" HorizontalOptions="FillAndExpand" VerticalOptions="FillAndExpand"/>
                <Popups:SuccessPopup IsVisible="{Binding IsSuccess}" HorizontalOptions="FillAndExpand" VerticalOptions="FillAndExpand"/>
            </Grid>
        </ContentPage.Content>
    </ContentPage>